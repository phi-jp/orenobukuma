app
  header
  content
  footer
  
  script.
    this.on('mount', function() {
      riot.route.start();

      riot.route(function(path, query) {
        var tag = path[0];

        if (!tag) {
          tag = 'home';
        }

        var pages = ['login', 'signup', 'users', 'home', 'links'];
        if (pages.indexOf(tag) === -1) {
          console.log(tag, 'to', 'user');
          tag = 'user';
        }

        riot.mount('content', tag, {
          path: path,
          query: query,
        });
      });

      var hash = location.hash.replace('#', '');
      if (hash) {
        riot.route.exec();
      }
      // riot.route(hash || 'home');
    });

    this.msg = 'Hello, Riot.js';

header
  nav.light-blue.lighten-1
    div.row
      div.col.s12
        div.brand-logo
          a(href='#home') オレのブクマ
        ul.right(if='{!isLogin()}')
          li
            a(onclick='{login}') Login
          li
            a(onclick='{signup}') Signup
        ul.right(if='{isLogin()}')
          li
            a(href='#users') Users
          li
            a(href='#links') Links
          li
            a(onclick='{logout}') Logout
  script.
    this.login = function() {
      riot.route('login');
    };
    this.signup = function() {
      riot.route('signup');
    };
    this.logout = function() {
      riot.route('login');
      db.logout();
    };

    this.isLogin = function() {
      return !!window.authData;
    };

// # link
item
  div.z-depth-2.item
    div.row
      div.col.s4.side
        div.image
          a(href='{url}', target='_blank')
            // img(src='http://s.wordpress.com/mshots/v1/{url}?w=320')
            img(src='http://capture.heartrails.com/320x240/delay=2?{url}')

      div.col.s8.content
        div.main
          a.title.grey-text.text-darken-4(href='{url}') {title}
          div(if='{!editing}')
            div.markdown(name='_markdown')
          div(if='{editing}')
            textarea.materialize-textarea(name='_description', onblur='{this.save}') {note}
        div.action.right-align
          i.material-icons(onclick='{this.edit}') edit

  style(scoped, type='less').

    .item {
      background-color: white;

      .side {
        height: auto;
        .image {
          border-right: 1px solid rgba(0, 0, 0, 0.1);
          img {
            width: 100%;
          }
        }
      }

      .content {
        position: relative;
        .main {
          padding-top: 1rem;
          padding-right: 1rem;
          .title {
            font-size: 1.4rem;
          }

          .markdown {
            line-height: 1.2;
            ul {
              padding-left: 1.5rem;
              li {
                list-style-type: circle;
              }
            }
          }
        }
        .action {
          cursor: pointer;
          position: absolute;
          right: 16px;
          top: 6px;
          opacity: 0;
          transition: 256ms;
        }
      }

      &:hover {
        .action {
          opacity: 1;
        }
      }
    }
  script.
    this.editing = false;
    this.edit = function() {
      this.editing = true;
      setTimeout(function() {
        this._description.focus();
      }.bind(this), 100);
    };
    this.save = function() {
      var linkRef = ref.child('users').child(authData.uid).child('links').child(this.id);

      linkRef.update({
        note: this._description.value,
      });

      this.editing = false;
    };
    this.del = function() {
      var users = ref.child('links').child(this.id).child('users');
      users.child(authData.uid).remove();

      ref.child('users').child(authData.uid).child('links').child(this.id).remove();
    };

    this.on('update', function() {
      this._markdown.innerHTML = marked(this.note);
    });

// # home
home
  div.container
    h2 ホームだよー({user.name})
    p {user.description}
    input(name='link', value='http://phiary.me')
    
    div
      button.btn(onclick='{onadd}') add

    br

    div.row
      div.col.s12(each='{links}')
        item
  script.

    var self = this;
    this.links = [];

    db.users.links.index(authData.uid, function(d) {
      this.links.push(d);
      this.update();
    }.bind(this));

    this.onadd = function() {
      var url = this.link.value;

      getTitle(url, function(data) {
        self.add(url, data.title);
      });
    };

    this.add = function(url, title) {
      var link = ref.child('links').push({
        title: title,
        url: url,
        uid: authData.uid,
        timestamp: Date.now(),
      });

      link.child('users').child(authData.uid).set(true);

      var userLinks = ref.child('users').child(authData.uid).child('links');
      userLinks.child(link.key()).set({
        note: '',
        timestamp: Date.now(),
      });
    };

users
  div.container
    h2 users です!

    ul
      li(each='{users}')
        a(href='\#{name}') {name}
        | 
        span {description}
  script.

    this.users = [];

    ref.child('users').on('child_added', function(snapshot) {
      this.users.push(snapshot.val());
      this.update();
    }.bind(this));

// # links
links
  div.container
    h2 links です!

    div.row
      div.col.s12(each='{links}')
        item
  script.

    var self = this;
    this.links = [];

    db.users.links.index(authData.uid, function(d) {
      this.links.push(d);
      this.update();
    }.bind(this));


signup
  div.container
    form(onsubmit='{signup}')
      h2 Signup
      div
        input(name='email', type='text', placeholder='email')
      div
        input(name='password', type='password', placeholder='password')
      div.right
        button.btn signup
  script.
    this.signup = function() {
      ref.createUser({
        email: this.email.value,
        password: this.password.value,
      }, function(error, authData) {
        if (error) {
          switch (error.code) {
            case 'EMAIL_TOKEN':
              console.log("The new user account cannot be created because the email is already in use.");
              break;
            case 'INVALID_EMAIL' :
              console.log("The specified email is not a valid email.");
              break;
            default :
              console.log("Error creating user:", error);
          }
        }
        else {
          console.log("Successfully created user account with uid:", authData.uid);
        }
      });
    };
// login
login
  div.container
    form(onsubmit='{login}')
      h2 Login
      div
        input(name='email', type='text', placeholder='email')
      div
        input(name='password', type='password', placeholder='password')
      div.right
        button.btn login
  script.
    this.login = function() {
      ref.authWithPassword({
        email: this.email.value,
        password: this.password.value,
      }, function(error, authData) {
        window.authData = authData;
        riot.route('home');
      });
    };

