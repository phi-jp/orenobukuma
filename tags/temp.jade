app
  header
  content
  footer
  
  script.
    this.on('mount', function() {
      riot.route.start();

      riot.route(function(path, query) {
        var tag = path[0];

        if (!tag) {
          tag = 'home';
        }

        var pages = ['login', 'signup', 'users', 'home', 'links'];
        if (pages.indexOf(tag) === -1) {
          console.log(tag, 'to', 'user');
          tag = 'user';
        }

        riot.mount('content', tag, {
          path: path,
          query: query,
        });
      });

      var hash = location.hash.replace('#', '');
      if (hash) {
        riot.route.exec();
      }
      // riot.route(hash || 'home');
    });

    this.msg = 'Hello, Riot.js';

header
  nav.light-blue.lighten-1
    div.row
      div.col.s12
        div.brand-logo
          a(href='#home') オレのブクマ
        ul.right(if='{!isLogin()}')
          li
            a(onclick='{login}') Login
          li
            a(onclick='{signup}') Signup
        ul.right(if='{isLogin()}')
          li
            a(href='#users') Users
          li
            a(href='#links') Links
          li
            a(onclick='{logout}') Logout
  script.
    this.login = function() {
      riot.route('login');
    };
    this.signup = function() {
      riot.route('signup');
    };
    this.logout = function() {
      riot.route('login');
      db.logout();
    };

    this.isLogin = function() {
      return !!window.authData;
    };




signup
  div.container
    form(onsubmit='{signup}')
      h2 Signup
      div
        input(name='email', type='text', placeholder='email')
      div
        input(name='password', type='password', placeholder='password')
      div.right
        button.btn signup
  script.
    this.signup = function() {
      ref.createUser({
        email: this.email.value,
        password: this.password.value,
      }, function(error, authData) {
        if (error) {
          switch (error.code) {
            case 'EMAIL_TOKEN':
              console.log("The new user account cannot be created because the email is already in use.");
              break;
            case 'INVALID_EMAIL' :
              console.log("The specified email is not a valid email.");
              break;
            default :
              console.log("Error creating user:", error);
          }
        }
        else {
          console.log("Successfully created user account with uid:", authData.uid);
        }
      });
    };
// login
login
  div.container
    form(onsubmit='{login}')
      h2 Login
      div
        input(name='email', type='text', placeholder='email')
      div
        input(name='password', type='password', placeholder='password')
      div.right
        button.btn login
  script.
    this.login = function() {
      ref.authWithPassword({
        email: this.email.value,
        password: this.password.value,
      }, function(error, authData) {
        window.authData = authData;
        riot.route('home');
      });
    };

